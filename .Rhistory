runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
shiny::runApp('NFL draft/NFL_draft_app')
View(nfl_draft_order)
View(nfl_draft_order)
View(summary_set)
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
shiny::runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
library(tidyverse)
library(sqldf)
library(kableExtra)
# Import draft tables
trades <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/trades.csv")
draft_picks <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/draft_picks.csv")
draft_values <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/draft_values.csv")
# Will use much later
draft_picks%>%
select(pfr_id, position)%>%
filter(!is.na(pfr_id), position == 'QB')%>%
unique() -> pfr_positions
library(tidyverse)
library(sqldf)
library(kableExtra)
# Import draft tables
trades <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/trades.csv")
draft_picks <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/draft_picks.csv")
draft_values <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/draft_values.csv")
# Idenfitifes whether a player is a QB or not
draft_picks%>%
select(pfr_id, position)%>%
filter(!is.na(pfr_id), position == 'QB')%>%
unique() -> pfr_positions
trades%>%
head()
View(trades)
draft_picks%>%
head()
draft_values%>%
head()
View(trades)
trade_value_base <- trades%>%
group_by(trade_id)%>%
mutate(n = n(), draft_picks = ifelse(any(is.na(pick_season)), 0, n()))%>%
ungroup()%>%
#future picks are evaluated a round later
mutate(draft_pick_EV = ifelse(season != pick_season, (pick_round-1)*32+32, pick_number))%>%
#filter out trades with players
filter(n == draft_picks)%>%
left_join(., draft_values, by = c("draft_pick_EV"="pick"))%>%
left_join(., pfr_positions, by = c("pfr_id"="pfr_id"))%>%
select(trade_id: pick_number, position, draft_pick_EV:pff)%>%
mutate(position = ifelse(position == 'QB', 'QB', 'non-QB'))
View(trade_value_base)
summary_set%>%
filter(pick_number <= 32, amount_received > 0, amount_given > 0
# , position %in% c('QB', 'non-QB')
# ,chart_type == 'hill'
)%>%
# select(-position)%>%
ggplot(aes(x = pick_number, y= amount_received/amount_given))+
geom_point(size = 1.5, aes(size = 2, color = position))+
# geom_point(size = 1.5, aes(size = 2, color = position))+
geom_vline(xintercept = 1)+
geom_hline(yintercept = 0)+
geom_smooth(data=summary_set%>%
filter(pick_number <= 32,
amount_received > 0,
amount_given > 0,
position %in% c('QB','non-QB')),
se= FALSE,
color = 'black')+
theme_bw()+
facet_wrap(. ~ chart_type, scale = 'free')+
labs(x = '\nPick #',
y = 'Additional amount received in return\n',
title = 'Pick # vs the expected amount received in return.',
caption = '')+
theme(legend.position = c(0.85, 0.25),
legend.background = element_rect(fill = "white", colour = NA),
legend.title = element_blank())
library(tidyverse)
library(sqldf)
library(ggthemes)
# Import draft tables
trades <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/trades.csv")
draft_picks <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/draft_picks.csv")
draft_values <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/draft_values.csv")
# Idenfitifes whether a player is a QB or not
draft_picks%>%
select(pfr_id, position)%>%
filter(!is.na(pfr_id), position == 'QB')%>%
unique() -> pfr_positions
trades%>%
head()
draft_picks%>%
head()
draft_values%>%
head()
# Building out a base table
trade_value_base <- trades%>%
group_by(trade_id)%>%
mutate(n = n(), draft_picks = ifelse(any(is.na(pick_season)), 0, n()))%>%
ungroup()%>%
#future picks are evaluated a round later
mutate(draft_pick_EV = ifelse(season != pick_season, (pick_round-1)*32+32, pick_number))%>%
#filter out trades with players
filter(n == draft_picks)%>%
left_join(., draft_values, by = c("draft_pick_EV"="pick"))%>%
left_join(., pfr_positions, by = c("pfr_id"="pfr_id"))%>%
select(trade_id: pick_number, position, draft_pick_EV:pff)%>%
mutate(position = ifelse(position == 'QB', 'QB', 'non-QB'))
# Trade value given & received in all trades & value chart types
trade_value_all <- trade_value_base%>%
group_by(trade_id, gave, received)%>%
summarise(stuart = sum(stuart),
johnson = sum(johnson),
hill = sum(hill),
otc = sum(otc),
pff = sum(pff))%>%
gather(chart_type, amount, stuart:pff)
# Gets information about the top pick traded in a given trade
trade_value_base%>%
group_by(trade_id)%>%
filter(draft_pick_EV == min(draft_pick_EV))%>%
select(trade_id, season, trade_date, gave, received, pick_number) -> information
# Picks traded by each team concatenated
trade_value_base%>%
group_by(trade_id, gave, received)%>%
summarise(trade_results = paste(sort(pick_number), collapse = ', ')) -> picks
#Write tables out to sql. Not necessary as the SQL query below can be run via R code.
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "NFL_draft.sqlite")
dbWriteTable(con,"trade_value_all", trade_value_all, overwrite = TRUE)
dbWriteTable(con,"trade_value_base", trade_value_base, overwrite = TRUE)
dbWriteTable(con,"information", information, overwrite = TRUE)
dbWriteTable(con,"picks", picks, overwrite = TRUE)
dbWriteTable(con,"draft_picks", draft_picks, overwrite = TRUE)
query = "select a.trade_id, a.gave, a.received, a.chart_type,
a.amount as amount_given,
b.amount as amount_received,
a.amount-b.amount as difference,
(a.amount-b.amount)/a.amount as given_percentage,
(a.amount-b.amount)/b.amount as received_percentage,
c.season, c.trade_date, c.pick_number,
case when f.position = 'QB' then 'QB'
else 'non-QB' end as position,
d.trade_results as given,
e.trade_results as offered,
f.pfr_name
from trade_value_all as a
left join trade_value_all as b on a.trade_id = b.trade_id and a.chart_type = b.chart_type and a.gave != b.gave
inner join information as c on a.trade_id = c.trade_id and a.gave = c.gave and a.received = c.received
inner join picks as d on a.trade_id = d.trade_id and a.gave = d.gave
inner join picks as e on a.trade_id = e.trade_id and a.gave = e.received
left join draft_picks as f on c.season = f.season and c.pick_number = f.pick
where b.amount > 0 and a.amount > 0
order by 1, a.chart_type
"
summary_set <- sqldf(query)
summary_set%>%
head()
# write.csv(summary_set, 'draft_trade_evals.csv')
# summary_set <- read.csv('draft_trade_evals.csv')
summary_set%>%
mutate(chart_type = tools::toTitleCase(chart_type))%>%
filter(pick_number <= 32, amount_received > 0, amount_given > 0
# , position %in% c('QB', 'non-QB')
# ,chart_type == 'hill'
)%>%
# select(-position)%>%
ggplot(aes(x = pick_number, y= amount_received/amount_given))+
geom_point(size = 1.5, aes(size = 2, color = position, shape = position))+
geom_vline(xintercept = 1)+
geom_hline(yintercept = 1)+
geom_smooth(data=summary_set%>%
filter(pick_number <= 32,
amount_received > 0,
amount_given > 0,
position %in% c('QB','non-QB')),
se= FALSE,
color = 'black')+
theme_wsj()+
facet_wrap(. ~ chart_type, scale = 'free')+
labs(x = '\nPick #',  y= 'Expected % received\n')+
theme(legend.position = c(0.85, 0.25),
legend.background = element_rect(fill = "white", colour = NA),
legend.title = element_blank())+
scale_y_continuous(labels = scales::percent)
summary_set%>%
mutate(chart_type = tools::toTitleCase(chart_type))%>%
filter(pick_number <= 32, amount_received > 0, amount_given > 0
# , position %in% c('QB', 'non-QB')
# ,chart_type == 'hill'
)%>%
# select(-position)%>%
ggplot(aes(x = pick_number, y= amount_received/amount_given))+
geom_point(size = 1.5, aes(size = 2, color = position, shape = position))+
geom_vline(xintercept = 1)+
geom_hline(yintercept = 1)+
geom_smooth(se= FALSE,
color = 'black')+
theme_wsj()+
facet_wrap(. ~ chart_type, scale = 'free')+
labs(x = '\nPick #',  y= 'Expected % received\n')+
theme(legend.position = c(0.85, 0.25),
legend.background = element_rect(fill = "white", colour = NA),
legend.title = element_blank())+
scale_y_continuous(labels = scales::percent)
summary_set%>%
mutate(chart_type = tools::toTitleCase(chart_type))%>%
filter(pick_number <= 32, amount_received > 0, amount_given > 0
# , position %in% c('QB', 'non-QB')
# ,chart_type == 'hill'
)%>%
# select(-position)%>%
ggplot(aes(x = pick_number, y= amount_received/amount_given))+
geom_point(size = 1.5, aes(size = 2, color = position, shape = position))+
geom_vline(xintercept = 1)+
geom_hline(yintercept = 1)+
geom_smooth(se= FALSE,
color = 'black')+
theme_wsj()+
facet_wrap(. ~ chart_type, scale = 'free')+
labs(x = '\nPick #',  y= 'Expected % received\n')+
theme(legend.position = c(0.85, 0.25),
legend.background = element_rect(fill = "white", colour = NA),
legend.title = element_blank(),
text = element_text(size=20),
axis.title=element_text(size=30),
strip.text = element_text(size = 20))+
scale_y_continuous(labels = scales::percent)
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
shiny::runApp('NFL draft/NFL-draft-trade-app')
shiny::runApp('NFL draft/NFL-draft-trade-app')
shiny::runApp('NFL draft/NFL-draft-trade-app')
shiny::runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
shiny::runApp('NFL draft/NFL-draft-trade-app')
shiny::runApp('NFL draft/NFL-draft-trade-app')
rsconnect::setAccountInfo(name='infiniteflashchess',
token='0A93C49B77D604F61026DDDF5788250E',
secret='LXS2eBhNAPM1l0KBxpciYIPMQyZk1aPwCEfwl2ed')
shiny::runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
# setwd("~/NFL draft/NFL-draft-trade-app")
library(shiny)
library(shinyWidgets)
library(tidyverse)
library(scales)
library(latex2exp)
library(sqldf)
library(ggthemes)
# the only tables we need
summary_set <- read.csv('draft_trade_evals.csv')
nfl_draft_order <- read.csv('NFLdraftorder2023_values.csv')%>%
mutate(future_pick = 'Not')%>%
bind_rows(read.csv('NFLdraftorder2024_and_2025_values_half.csv'))%>%
bind_rows(read.csv('NFLdraftorder2024_and_2025_values_full.csv'))%>%
mutate(Pick_Name = paste(Team, " ", Year, " ", ordinal(Round), " (#", Pick_number, ")", sep = ""))
setwd("~/NFL draft/NFL-draft-trade-app")
library(shiny)
library(shinyWidgets)
library(tidyverse)
library(scales)
library(latex2exp)
library(sqldf)
library(ggthemes)
summary_set <- read.csv('draft_trade_evals.csv')
nfl_draft_order <- read.csv('NFLdraftorder2023_values.csv')%>%
mutate(future_pick = 'Not')%>%
bind_rows(read.csv('NFLdraftorder2024_and_2025_values_half.csv'))%>%
bind_rows(read.csv('NFLdraftorder2024_and_2025_values_full.csv'))%>%
mutate(Pick_Name = paste(Team, " ", Year, " ", ordinal(Round), " (#", Pick_number, ")", sep = ""))
View(nfl_draft_order)
runApp()
View(nfl_draft_order)
nfl_draft_order$future_pick
nfl_draft_order$future_pick%>%unique()
runApp()
runApp()
nfl_draft_order <- read.csv('NFLdraftorder2023_values.csv')%>%
mutate(future_pick = 'Not')%>%
bind_rows(read.csv('NFLdraftorder2024_and_2025_values_half.csv'))%>%
bind_rows(read.csv('NFLdraftorder2024_and_2025_values_full.csv'))%>%
mutate(Pick_Name = paste(Team, " ", Year, " ", ordinal(Round), " (#", Pick_number, ")", sep = ""))
View(nfl_draft_order)
runApp()
runApp()
runApp()
runApp()
runApp()
View(summary_set)
nfl_draft_order <- read.csv('NFLdraftorder2023_values.csv')%>%
mutate(future_pick = 'Not')%>%
bind_rows(read.csv('NFLdraftorder2024_and_2025_values_half.csv'))%>%
bind_rows(read.csv('NFLdraftorder2024_and_2025_values_full.csv'))%>%
mutate(Pick_Name = paste(Team, " ", Year, " ", ordinal(Round), " (#", Pick_number, ")", sep = ""))
# Run to create draft_trade_evals.csv
draft_values <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/draft_values.csv")
draft_picks <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/draft_picks.csv")
trades <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/trades.csv")
draft_picks%>%
select(pfr_id, position)%>%
filter(!is.na(pfr_id), position == 'QB')%>%
unique() -> pfr_positions
trade_value_base <- trades%>%
group_by(trade_id)%>%
mutate(n = n(),
draft_picks = ifelse(any(is.na(pick_season)), 0, n()))%>%
ungroup()%>%
# mutate(draft_pick_EV = ifelse(season != pick_season, (pick_round-1)*32+16, pick_number))%>%
mutate(draft_pick_EV = ifelse(season != pick_season, (pick_round-1)*32+32, pick_number))%>%
filter(n == draft_picks)%>%
left_join(., draft_values, by = c("draft_pick_EV"="pick"))%>%
left_join(., pfr_positions, by = c("pfr_id"="pfr_id"))%>%
select(trade_id: pick_number, position, draft_pick_EV:pff)%>%
mutate(position = ifelse(position == 'QB', 'QB', 'non-QB'))
trade_value_all <- trade_value_base%>%
group_by(trade_id, gave, received)%>%
summarise(stuart = sum(stuart),
johnson = sum(johnson),
hill = sum(hill),
otc = sum(otc),
pff = sum(pff))%>%
gather(chart_type, amount, stuart:pff)
trade_value_base%>%
group_by(trade_id)%>%
filter(draft_pick_EV == min(draft_pick_EV))%>%
select(trade_id, season, trade_date, gave, received, pick_number) -> information
trade_value_base%>%
group_by(trade_id, gave, received)%>%
summarise(trade_results = paste(sort(pick_number), collapse = ', ')) -> picks
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "NFL_draft.sqlite")
dbWriteTable(con,"trade_value_all", trade_value_all, overwrite = TRUE)
dbWriteTable(con,"trade_value_base", trade_value_base, overwrite = TRUE)
dbWriteTable(con,"information", information, overwrite = TRUE)
dbWriteTable(con,"picks", picks, overwrite = TRUE)
dbWriteTable(con,"draft_picks", draft_picks, overwrite = TRUE)
query = "select a.trade_id, a.gave, a.received, a.chart_type,
a.amount as amount_given,
b.amount as amount_received,
a.amount-b.amount as difference,
(a.amount-b.amount)/a.amount as given_percentage,
(a.amount-b.amount)/b.amount as received_percentage,
c.season, c.trade_date, c.pick_number,
case when f.position = 'QB' then 'QB'
else 'non-QB' end as position,
d.trade_results as given,
e.trade_results as offered,
f.pfr_name,
'Full round later' as future_pick
--         'Half round later' as future_pick
from trade_value_all as a
left join trade_value_all as b on a.trade_id = b.trade_id and a.chart_type = b.chart_type and a.gave != b.gave
inner join information as c on a.trade_id = c.trade_id and a.gave = c.gave and a.received = c.received
inner join picks as d on a.trade_id = d.trade_id and a.gave = d.gave
inner join picks as e on a.trade_id = e.trade_id and a.gave = e.received
left join draft_picks as f on c.season = f.season and c.pick_number = f.pick
where b.amount > 0 and a.amount > 0
order by 1, a.chart_type
"
summary_set <- sqldf(query)
write.csv(summary_set, 'draft_trade_evals.csv')
trade_value_base <- trades%>%
group_by(trade_id)%>%
mutate(n = n(),
draft_picks = ifelse(any(is.na(pick_season)), 0, n()))%>%
ungroup()%>%
mutate(draft_pick_EV = ifelse(season != pick_season, (pick_round-1)*32+16, pick_number))%>%
# mutate(draft_pick_EV = ifelse(season != pick_season, (pick_round-1)*32+32, pick_number))%>%
filter(n == draft_picks)%>%
left_join(., draft_values, by = c("draft_pick_EV"="pick"))%>%
left_join(., pfr_positions, by = c("pfr_id"="pfr_id"))%>%
select(trade_id: pick_number, position, draft_pick_EV:pff)%>%
mutate(position = ifelse(position == 'QB', 'QB', 'non-QB'))
trade_value_all <- trade_value_base%>%
group_by(trade_id, gave, received)%>%
summarise(stuart = sum(stuart),
johnson = sum(johnson),
hill = sum(hill),
otc = sum(otc),
pff = sum(pff))%>%
gather(chart_type, amount, stuart:pff)
trade_value_base%>%
group_by(trade_id)%>%
filter(draft_pick_EV == min(draft_pick_EV))%>%
select(trade_id, season, trade_date, gave, received, pick_number) -> information
trade_value_base%>%
group_by(trade_id, gave, received)%>%
summarise(trade_results = paste(sort(pick_number), collapse = ', ')) -> picks
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "NFL_draft.sqlite")
dbWriteTable(con,"trade_value_all", trade_value_all, overwrite = TRUE)
dbWriteTable(con,"trade_value_base", trade_value_base, overwrite = TRUE)
dbWriteTable(con,"information", information, overwrite = TRUE)
dbWriteTable(con,"picks", picks, overwrite = TRUE)
dbWriteTable(con,"draft_picks", draft_picks, overwrite = TRUE)
query = "select a.trade_id, a.gave, a.received, a.chart_type,
a.amount as amount_given,
b.amount as amount_received,
a.amount-b.amount as difference,
(a.amount-b.amount)/a.amount as given_percentage,
(a.amount-b.amount)/b.amount as received_percentage,
c.season, c.trade_date, c.pick_number,
case when f.position = 'QB' then 'QB'
else 'non-QB' end as position,
d.trade_results as given,
e.trade_results as offered,
f.pfr_name,
--         'Full round later' as future_pick
'Half round later' as future_pick
from trade_value_all as a
left join trade_value_all as b on a.trade_id = b.trade_id and a.chart_type = b.chart_type and a.gave != b.gave
inner join information as c on a.trade_id = c.trade_id and a.gave = c.gave and a.received = c.received
inner join picks as d on a.trade_id = d.trade_id and a.gave = d.gave
inner join picks as e on a.trade_id = e.trade_id and a.gave = e.received
left join draft_picks as f on c.season = f.season and c.pick_number = f.pick
where b.amount > 0 and a.amount > 0
order by 1, a.chart_type
"
summary_set <- sqldf(query)
# write.csv(summary_set, 'draft_trade_evals.csv')
write.csv(summary_set, 'draft_trade_evals_half_round_later.csv')
nfl_draft_order <- read.csv('NFLdraftorder2023.csv')
nfl_draft_order%>%
mutate(Round = ifelse(between(Pick_number, 1, 32), 1,
ifelse(between(Pick_number, 33, 64), 2,
ifelse(between(Pick_number, 65, 103), 3,
ifelse(between(Pick_number, 104, 137), 4,
ifelse(between(Pick_number, 138, 178), 5,
ifelse(between(Pick_number, 179, 220), 6,
7
)
)
)
)
)
)
)%>%
filter(Pick_number != 21)%>%
mutate(Pick_number = row_number(), Year = 2023)%>%
left_join(., draft_values, by = c("Pick_number"="pick"))%>%
select(Pick_number, Team, Round, Year, stuart:pff)%>%
write.csv(., "NFLdraftorder2023_values.csv", row.names = FALSE)
teams = nfl_draft_order$Team%>%unique()
pick_num = c(16, 16+32, 16+64, 16+96, 16+128, 16+160, 16+192)
# pick_num = c(16, 16+32, 16+64, 16+96, 16+128, 16+160, 16+192)+16  #use this if you think teams value future picks a round later
year = c(2024, 2025)
expand.grid(teams, year, pick_num)%>%
magrittr::set_colnames(c('Team', 'Year', 'Pick_number'))%>%
left_join(., draft_values, by = c("Pick_number"="pick"))%>%
left_join(., data.frame(pick_num= pick_num, Round = 1:7), by = c("Pick_number"="pick_num"))%>%
# mutate(future_pick = 'Half round later')%>%
write.csv(., "NFLdraftorder2024_and_2025_values_half.csv", row.names = FALSE)
teams = nfl_draft_order$Team%>%unique()
pick_num = c(16, 16+32, 16+64, 16+96, 16+128, 16+160, 16+192)
# pick_num = c(16, 16+32, 16+64, 16+96, 16+128, 16+160, 16+192)+16  #use this if you think teams value future picks a round later
year = c(2024, 2025)
expand.grid(teams, year, pick_num)%>%
magrittr::set_colnames(c('Team', 'Year', 'Pick_number'))%>%
left_join(., draft_values, by = c("Pick_number"="pick"))%>%
left_join(., data.frame(pick_num= pick_num, Round = 1:7), by = c("Pick_number"="pick_num"))%>%
mutate(future_pick = 'Half round later')%>%
write.csv(., "NFLdraftorder2024_and_2025_values_half.csv", row.names = FALSE)
teams = nfl_draft_order$Team%>%unique()
# pick_num = c(16, 16+32, 16+64, 16+96, 16+128, 16+160, 16+192)
pick_num = c(16, 16+32, 16+64, 16+96, 16+128, 16+160, 16+192)+16  #use this if you think teams value future picks a round later
year = c(2024, 2025)
expand.grid(teams, year, pick_num)%>%
magrittr::set_colnames(c('Team', 'Year', 'Pick_number'))%>%
left_join(., draft_values, by = c("Pick_number"="pick"))%>%
left_join(., data.frame(pick_num= pick_num, Round = 1:7), by = c("Pick_number"="pick_num"))%>%
# mutate(future_pick = 'Half round later')%>%
# write.csv(., "NFLdraftorder2024_and_2025_values_half.csv", row.names = FALSE)
mutate(future_pick = 'Full round later')%>%
write.csv(., "NFLdraftorder2024_and_2025_values_full.csv", row.names = FALSE)
runApp()
read.csv('NFLdraftorder2024_and_2025_values_half.csv')
read.csv('NFLdraftorder2024_and_2025_values_full.csv')
nfl_draft_order <- read.csv('NFLdraftorder2023_values.csv')%>%
mutate(future_pick = 'Not')%>%
bind_rows(read.csv('NFLdraftorder2024_and_2025_values_half.csv'))%>%
bind_rows(read.csv('NFLdraftorder2024_and_2025_values_full.csv'))%>%
mutate(Pick_Name = paste(Team, " ", Year, " ", ordinal(Round), " (#", Pick_number, ")", sep = ""))
View(nfl_draft_order)
View(summary_set)
summary_set <- read.csv('draft_trade_evals.csv')%>%
bind_rows('draft_trade_evals_half_round_later.csv')
summary_set <- read.csv('draft_trade_evals.csv')%>%
bind_rows(read.csv('draft_trade_evals_half_round_later.csv'))
runApp()
runApp()
runApp()
