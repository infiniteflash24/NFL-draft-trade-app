pick_number = min_pick_ev.x,
chart_type,
amount_received = amount.x,
amount_given = amount.y,
given = trade_results.x,
offered = trade_results.y)%>%
group_by(chart_type)%>%
filter(pick_number == min(pick_number))%>%
mutate(difference = amount_received-amount_given,
given_percentage = (amount_given-amount_received)/amount_given,
received_percentage = (amount_received-amount_given)/amount_received,
season = format(Sys.Date(), "%Y")%>%as.numeric(),
trade_date = '2023-04-01',
position = 'Suggested trade',
pfr_name = 'Suggested trade'
)%>%
ungroup() -> suggested_trade
summary_set%>%
filter(amount_received > 0,
amount_given > 0,
# between(pick_number, input$Pick_num[1], input$Pick_num[2]),
between(pick_number, 1, 32),
# between(season, input$bins[1], input$bins[2]),
between(season, 2011, 2022)
# ,
# gave %in% input$Gave,
# received %in% input$Received
)%>%
bind_rows(suggested_trade)%>%
ggplot(aes(x = pick_number, y= amount_received-amount_given))+
geom_point(size = 1.5, aes(size = 2, color = position))+
geom_vline(xintercept = 1)+
geom_hline(yintercept = 0)+
geom_smooth(se= FALSE, color = 'black')+
theme_bw()+
facet_wrap(. ~ chart_type, scale = 'free')+
labs(x = '\nPick number',
y= 'Expected additional amount received in return\n')+
# xlab(TeX('$Pick\.number$'))+
# ylab(TeX('$E(Additional amount received in return)$'))+
# ggtitle('Pick_nun vs the E(Additional amount received) in return.')+
theme(legend.position = c(0.85, 0.25),
legend.background = element_rect(fill = "white", colour = NA),
legend.title = element_blank())
rm(team_picks)
rm(suggested_trade)
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
team_picks <-   nfl_draft_order%>%
# filter(Team %in% c(input$Team_1, input$Team_2))
filter(Team %in% c('CHI', 'IND'))
View(team_picks)
team_picks%>%
transmute(Pick_number,
gave = Team,
# received = ifelse(gave == input$Team_1, input$Team_2, input$Team_1),
received = ifelse(Team == 'CHI', 'IND', 'CHI'),
Round, Year, stuart, johnson, hill, otc, pff, Pick_Name)%>%
filter(Pick_Name %in% c(input$Team_1_picks, input$Team_2_picks))%>%
mutate(trade_id = 40000)%>%
group_by(trade_id, gave, received)%>%
summarise(stuart = sum(stuart),
johnson = sum(johnson),
hill = sum(hill),
otc = sum(otc),
pff = sum(pff),
min_pick_ev = min(Pick_number),
trade_results = paste(sort(Pick_Name), collapse = ', '))%>%
ungroup()%>%
gather(chart_type, amount, stuart:pff)%>%
left_join(., ., by = c("gave"="received",
"chart_type" = "chart_type"))%>%
transmute(trade_id = trade_id.x,
gave,
received,
pick_number = min_pick_ev.x,
chart_type,
amount_received = amount.x,
amount_given = amount.y,
given = trade_results.x,
offered = trade_results.y)%>%
group_by(chart_type)%>%
filter(pick_number == min(pick_number))%>%
mutate(difference = amount_received-amount_given,
given_percentage = (amount_given-amount_received)/amount_given,
received_percentage = (amount_received-amount_given)/amount_received,
season = format(Sys.Date(), "%Y")%>%as.numeric(),
trade_date = '2023-04-01',
position = 'Suggested trade',
pfr_name = 'Suggested trade'
)%>%
ungroup() -> suggested_trade
team_picks%>%
transmute(Pick_number,
gave = Team,
# received = ifelse(gave == input$Team_1, input$Team_2, input$Team_1),
received = ifelse(Team == 'CHI', 'IND', 'CHI'),
Round, Year, stuart, johnson, hill, otc, pff, Pick_Name)%>%
# filter(Pick_Name %in% c(input$Team_1_picks, input$Team_2_picks))%>%
mutate(trade_id = 40000)%>%
group_by(trade_id, gave, received)%>%
summarise(stuart = sum(stuart),
johnson = sum(johnson),
hill = sum(hill),
otc = sum(otc),
pff = sum(pff),
min_pick_ev = min(Pick_number),
trade_results = paste(sort(Pick_Name), collapse = ', '))%>%
ungroup()%>%
gather(chart_type, amount, stuart:pff)%>%
left_join(., ., by = c("gave"="received",
"chart_type" = "chart_type"))%>%
transmute(trade_id = trade_id.x,
gave,
received,
pick_number = min_pick_ev.x,
chart_type,
amount_received = amount.x,
amount_given = amount.y,
given = trade_results.x,
offered = trade_results.y)%>%
group_by(chart_type)%>%
filter(pick_number == min(pick_number))%>%
mutate(difference = amount_received-amount_given,
given_percentage = (amount_given-amount_received)/amount_given,
received_percentage = (amount_received-amount_given)/amount_received,
season = format(Sys.Date(), "%Y")%>%as.numeric(),
trade_date = '2023-04-01',
position = 'Suggested trade',
pfr_name = 'Suggested trade'
)%>%
ungroup() -> suggested_trade
team_picks%>%
transmute(Pick_number,
gave = Team,
# received = ifelse(gave == input$Team_1, input$Team_2, input$Team_1),
received = ifelse(Team == 'CHI', 'IND', 'CHI'),
Round, Year, stuart, johnson, hill, otc, pff, Pick_Name)
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
runApp()
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
shiny::runApp('NFL draft/NFL_draft_app')
View(summary_set)
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
shiny::runApp('NFL draft/NFL_draft_app')
View(nfl_draft_order)
View(nfl_draft_order)
View(summary_set)
runApp('NFL draft/NFL_draft_app')
runApp('NFL draft/NFL_draft_app')
shiny::runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
library(tidyverse)
library(sqldf)
library(kableExtra)
# Import draft tables
trades <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/trades.csv")
draft_picks <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/draft_picks.csv")
draft_values <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/draft_values.csv")
# Will use much later
draft_picks%>%
select(pfr_id, position)%>%
filter(!is.na(pfr_id), position == 'QB')%>%
unique() -> pfr_positions
library(tidyverse)
library(sqldf)
library(kableExtra)
# Import draft tables
trades <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/trades.csv")
draft_picks <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/draft_picks.csv")
draft_values <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/draft_values.csv")
# Idenfitifes whether a player is a QB or not
draft_picks%>%
select(pfr_id, position)%>%
filter(!is.na(pfr_id), position == 'QB')%>%
unique() -> pfr_positions
trades%>%
head()
View(trades)
draft_picks%>%
head()
draft_values%>%
head()
View(trades)
trade_value_base <- trades%>%
group_by(trade_id)%>%
mutate(n = n(), draft_picks = ifelse(any(is.na(pick_season)), 0, n()))%>%
ungroup()%>%
#future picks are evaluated a round later
mutate(draft_pick_EV = ifelse(season != pick_season, (pick_round-1)*32+32, pick_number))%>%
#filter out trades with players
filter(n == draft_picks)%>%
left_join(., draft_values, by = c("draft_pick_EV"="pick"))%>%
left_join(., pfr_positions, by = c("pfr_id"="pfr_id"))%>%
select(trade_id: pick_number, position, draft_pick_EV:pff)%>%
mutate(position = ifelse(position == 'QB', 'QB', 'non-QB'))
View(trade_value_base)
summary_set%>%
filter(pick_number <= 32, amount_received > 0, amount_given > 0
# , position %in% c('QB', 'non-QB')
# ,chart_type == 'hill'
)%>%
# select(-position)%>%
ggplot(aes(x = pick_number, y= amount_received/amount_given))+
geom_point(size = 1.5, aes(size = 2, color = position))+
# geom_point(size = 1.5, aes(size = 2, color = position))+
geom_vline(xintercept = 1)+
geom_hline(yintercept = 0)+
geom_smooth(data=summary_set%>%
filter(pick_number <= 32,
amount_received > 0,
amount_given > 0,
position %in% c('QB','non-QB')),
se= FALSE,
color = 'black')+
theme_bw()+
facet_wrap(. ~ chart_type, scale = 'free')+
labs(x = '\nPick #',
y = 'Additional amount received in return\n',
title = 'Pick # vs the expected amount received in return.',
caption = '')+
theme(legend.position = c(0.85, 0.25),
legend.background = element_rect(fill = "white", colour = NA),
legend.title = element_blank())
library(tidyverse)
library(sqldf)
library(ggthemes)
# Import draft tables
trades <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/trades.csv")
draft_picks <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/draft_picks.csv")
draft_values <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/draft_values.csv")
# Idenfitifes whether a player is a QB or not
draft_picks%>%
select(pfr_id, position)%>%
filter(!is.na(pfr_id), position == 'QB')%>%
unique() -> pfr_positions
trades%>%
head()
draft_picks%>%
head()
draft_values%>%
head()
# Building out a base table
trade_value_base <- trades%>%
group_by(trade_id)%>%
mutate(n = n(), draft_picks = ifelse(any(is.na(pick_season)), 0, n()))%>%
ungroup()%>%
#future picks are evaluated a round later
mutate(draft_pick_EV = ifelse(season != pick_season, (pick_round-1)*32+32, pick_number))%>%
#filter out trades with players
filter(n == draft_picks)%>%
left_join(., draft_values, by = c("draft_pick_EV"="pick"))%>%
left_join(., pfr_positions, by = c("pfr_id"="pfr_id"))%>%
select(trade_id: pick_number, position, draft_pick_EV:pff)%>%
mutate(position = ifelse(position == 'QB', 'QB', 'non-QB'))
# Trade value given & received in all trades & value chart types
trade_value_all <- trade_value_base%>%
group_by(trade_id, gave, received)%>%
summarise(stuart = sum(stuart),
johnson = sum(johnson),
hill = sum(hill),
otc = sum(otc),
pff = sum(pff))%>%
gather(chart_type, amount, stuart:pff)
# Gets information about the top pick traded in a given trade
trade_value_base%>%
group_by(trade_id)%>%
filter(draft_pick_EV == min(draft_pick_EV))%>%
select(trade_id, season, trade_date, gave, received, pick_number) -> information
# Picks traded by each team concatenated
trade_value_base%>%
group_by(trade_id, gave, received)%>%
summarise(trade_results = paste(sort(pick_number), collapse = ', ')) -> picks
#Write tables out to sql. Not necessary as the SQL query below can be run via R code.
con <- DBI::dbConnect(RSQLite::SQLite(), dbname = "NFL_draft.sqlite")
dbWriteTable(con,"trade_value_all", trade_value_all, overwrite = TRUE)
dbWriteTable(con,"trade_value_base", trade_value_base, overwrite = TRUE)
dbWriteTable(con,"information", information, overwrite = TRUE)
dbWriteTable(con,"picks", picks, overwrite = TRUE)
dbWriteTable(con,"draft_picks", draft_picks, overwrite = TRUE)
query = "select a.trade_id, a.gave, a.received, a.chart_type,
a.amount as amount_given,
b.amount as amount_received,
a.amount-b.amount as difference,
(a.amount-b.amount)/a.amount as given_percentage,
(a.amount-b.amount)/b.amount as received_percentage,
c.season, c.trade_date, c.pick_number,
case when f.position = 'QB' then 'QB'
else 'non-QB' end as position,
d.trade_results as given,
e.trade_results as offered,
f.pfr_name
from trade_value_all as a
left join trade_value_all as b on a.trade_id = b.trade_id and a.chart_type = b.chart_type and a.gave != b.gave
inner join information as c on a.trade_id = c.trade_id and a.gave = c.gave and a.received = c.received
inner join picks as d on a.trade_id = d.trade_id and a.gave = d.gave
inner join picks as e on a.trade_id = e.trade_id and a.gave = e.received
left join draft_picks as f on c.season = f.season and c.pick_number = f.pick
where b.amount > 0 and a.amount > 0
order by 1, a.chart_type
"
summary_set <- sqldf(query)
summary_set%>%
head()
# write.csv(summary_set, 'draft_trade_evals.csv')
# summary_set <- read.csv('draft_trade_evals.csv')
summary_set%>%
mutate(chart_type = tools::toTitleCase(chart_type))%>%
filter(pick_number <= 32, amount_received > 0, amount_given > 0
# , position %in% c('QB', 'non-QB')
# ,chart_type == 'hill'
)%>%
# select(-position)%>%
ggplot(aes(x = pick_number, y= amount_received/amount_given))+
geom_point(size = 1.5, aes(size = 2, color = position, shape = position))+
geom_vline(xintercept = 1)+
geom_hline(yintercept = 1)+
geom_smooth(data=summary_set%>%
filter(pick_number <= 32,
amount_received > 0,
amount_given > 0,
position %in% c('QB','non-QB')),
se= FALSE,
color = 'black')+
theme_wsj()+
facet_wrap(. ~ chart_type, scale = 'free')+
labs(x = '\nPick #',  y= 'Expected % received\n')+
theme(legend.position = c(0.85, 0.25),
legend.background = element_rect(fill = "white", colour = NA),
legend.title = element_blank())+
scale_y_continuous(labels = scales::percent)
summary_set%>%
mutate(chart_type = tools::toTitleCase(chart_type))%>%
filter(pick_number <= 32, amount_received > 0, amount_given > 0
# , position %in% c('QB', 'non-QB')
# ,chart_type == 'hill'
)%>%
# select(-position)%>%
ggplot(aes(x = pick_number, y= amount_received/amount_given))+
geom_point(size = 1.5, aes(size = 2, color = position, shape = position))+
geom_vline(xintercept = 1)+
geom_hline(yintercept = 1)+
geom_smooth(se= FALSE,
color = 'black')+
theme_wsj()+
facet_wrap(. ~ chart_type, scale = 'free')+
labs(x = '\nPick #',  y= 'Expected % received\n')+
theme(legend.position = c(0.85, 0.25),
legend.background = element_rect(fill = "white", colour = NA),
legend.title = element_blank())+
scale_y_continuous(labels = scales::percent)
summary_set%>%
mutate(chart_type = tools::toTitleCase(chart_type))%>%
filter(pick_number <= 32, amount_received > 0, amount_given > 0
# , position %in% c('QB', 'non-QB')
# ,chart_type == 'hill'
)%>%
# select(-position)%>%
ggplot(aes(x = pick_number, y= amount_received/amount_given))+
geom_point(size = 1.5, aes(size = 2, color = position, shape = position))+
geom_vline(xintercept = 1)+
geom_hline(yintercept = 1)+
geom_smooth(se= FALSE,
color = 'black')+
theme_wsj()+
facet_wrap(. ~ chart_type, scale = 'free')+
labs(x = '\nPick #',  y= 'Expected % received\n')+
theme(legend.position = c(0.85, 0.25),
legend.background = element_rect(fill = "white", colour = NA),
legend.title = element_blank(),
text = element_text(size=20),
axis.title=element_text(size=30),
strip.text = element_text(size = 20))+
scale_y_continuous(labels = scales::percent)
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
shiny::runApp('NFL draft/NFL-draft-trade-app')
shiny::runApp('NFL draft/NFL-draft-trade-app')
shiny::runApp('NFL draft/NFL-draft-trade-app')
shiny::runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
shiny::runApp('NFL draft/NFL-draft-trade-app')
shiny::runApp('NFL draft/NFL-draft-trade-app')
rsconnect::setAccountInfo(name='infiniteflashchess',
token='0A93C49B77D604F61026DDDF5788250E',
secret='LXS2eBhNAPM1l0KBxpciYIPMQyZk1aPwCEfwl2ed')
shiny::runApp('NFL draft/NFL-draft-trade-app')
runApp('NFL draft/NFL-draft-trade-app')
shiny::runApp('NFL draft/NFL-draft-trade-app')
gc()
summary_set <- read.csv('draft_trade_evals.csv')%>%
bind_rows(read.csv('draft_trade_evals_half_round_later.csv'))
nfl_draft_order <- read.csv('NFLdraftorder2023_values.csv')%>%
mutate(future_pick = 'Not')%>%
bind_rows(read.csv('NFLdraftorder2024_and_2025_values_half.csv'))%>%
bind_rows(read.csv('NFLdraftorder2024_and_2025_values_full.csv'))%>%
mutate(Pick_Name = paste(Team, " ", Year, " ", ordinal(Round), " (#", Pick_number, ")", sep = ""))
setwd("~/NFL draft/NFL-draft-trade-app")
# setwd("~/NFL draft/NFL-draft-trade-app")
library(shiny)
library(shinyWidgets)
library(tidyverse)
library(scales)
library(latex2exp)
library(sqldf)
library(ggthemes)
summary_set <- read.csv('draft_trade_evals.csv')%>%
bind_rows(read.csv('draft_trade_evals_half_round_later.csv'))
nfl_draft_order <- read.csv('NFLdraftorder2023_values.csv')%>%
mutate(future_pick = 'Not')%>%
bind_rows(read.csv('NFLdraftorder2024_and_2025_values_half.csv'))%>%
bind_rows(read.csv('NFLdraftorder2024_and_2025_values_full.csv'))%>%
mutate(Pick_Name = paste(Team, " ", Year, " ", ordinal(Round), " (#", Pick_number, ")", sep = ""))
runApp()
# Run to create draft_trade_evals.csv
# cbs <- read.delim("~/NFL draft/NFL-draft-trade-app/cbs_trade_value.txt", header=FALSE)%>%
#        transmute(pick = V1, CBS = V2)
# draft_values <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/draft_values.csv")%>%
#                 left_join(., cbs, by = c("pick"="pick"))
draft_picks <- read_csv("https://raw.githubusercontent.com/leesharpe/nfldata/master/data/draft_picks.csv")
View(draft_picks)
View(summary_set)
library(tidyverse)
library(ggridges)
install.packages("ggridges")
library(ggridges)
gurl <- httr::GET("https://xx9p7hp1p7.execute-api.us-east-1.amazonaws.com/prod/PortalGeral",
httr::add_headers("X-Parse-Application-Id" =
"unAFkcaNDeXajurGB7LChj8SgQYS2ptm")) %>%
httr::content() %>%
'[['("results") %>%
'[['(1) %>%
'[['("arquivo") %>%
'[['("url")
gurl <- httr::GET("https://xx9p7hp1p7.execute-api.us-east-1.amazonaws.com/prod/PortalGeral",
httr::add_headers("X-Parse-Application-Id" = "unAFkcaNDeXajurGB7LChj8SgQYS2ptm")) %>%
httr::content() %>%
'[['("results") %>%
'[['(1) %>%
'[['("arquivo") %>%
'[['("url")
httr::GET("https://xx9p7hp1p7.execute-api.us-east-1.amazonaws.com/prod/PortalGeral",
httr::add_headers("X-Parse-Application-Id" = "unAFkcaNDeXajurGB7LChj8SgQYS2ptm"))
gurl <- httr::GET("https://xx9p7hp1p7.execute-api.us-east-1.amazonaws.com/prod/PortalGeral",
httr::add_headers("X-Parse-Application-Id" = "unAFkcaNDeXajurGB7LChj8SgQYS2ptm")) %>%
httr::content()
library(tidyverse)
library(ggridges)
url <- httr::GET("https://xx9p7hp1p7.execute-api.us-east-1.amazonaws.com/prod/PortalGeral",
httr::add_headers("X-Parse-Application-Id" =
"unAFkcaNDeXajurGB7LChj8SgQYS2ptm")) %>%
httr::content() %>%
'[['("results") %>%
'[['(1) %>%
'[['("arquivo") %>%
'[['("url")
data <- openxlsx::read.xlsx(url) %>%
filter(is.na(municipio), is.na(codmun)) %>%
mutate_at(vars(contains(c("Acumulado", "Novos", "novos"))), ~ as.numeric(.))
data[,8] <- openxlsx::convertToDate(data[,8])
data <- data %>%
mutate(mortalidade = obitosAcumulado / casosAcumulado,
date = data) %>%
select(-data) %>%
group_by(estado) %>%
mutate(height = casosNovos / sum(casosNovos))
ggplot(data = data[!is.na(data$estado),],
aes(x = date, y = estado, height = scales::rescale(height))) +
geom_ridgeline()
summary_set <- read.csv('draft_trade_evals.csv')%>%
bind_rows(read.csv('draft_trade_evals_half_round_later.csv'))
summary_set%>%
filter(future_pick == 'Full round later')%>%
mutate(trade_date = as.Date(trade_date))
summary_set%>%
filter(future_pick == 'Full round later')%>%
mutate(trade_date = as.Date(trade_date))%>%
str()
summary_set%>%
filter(future_pick == 'Full round later')%>%
mutate(trade_date = as.Date(trade_date))%>%
group_by(season, trade_date)%>%
tally()
runApp()
